# -*- coding: utf-8 -*-
"""subject_presict.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1YPQMGXWW0_NDTBRetz4_WJll9g-R-B57
"""

import numpy as np
import pandas as pd
import nltk
import re
import pickle

from nltk.corpus import stopwords
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.preprocessing import MultiLabelBinarizer
from sklearn.multiclass import OneVsRestClassifier
from sklearn.linear_model import LogisticRegression, RidgeClassifier

nltk.download('stopwords')
nltk.download('wordnet')

cols=['index','ID','label','statement','subject','speaker','speaker_job','state','party','barely_true',
        'false','half_true','mostly_true','pants_on_fire','context','justification']

train_df=pd.read_csv('dataset/train.tsv',sep='\t',header=None,names=cols)
val_df=pd.read_csv('dataset/val.tsv',sep='\t',header=None,names=cols)
test_df=pd.read_csv('dataset/test.tsv',sep='\t',header=None,names=cols)

train_df = train_df.append(val_df)

train_df = train_df.loc[:,['statement','subject']]
test_df = test_df.loc[:,['statement','subject']]

train_df = train_df.dropna(axis=0)
test_df = test_df.dropna(axis=0)

xtrain=train_df['statement'].values
xtest=test_df['statement'].values

ytrain = [subs.split(',') for subs in train_df['subject'].values]
ytest = [subs.split(',') for subs in test_df['subject'].values]

tags_counts={}

for tag in ytrain:
    for indtag in tag:
        if indtag not in tags_counts:
            tags_counts[indtag]=1
        else:
            tags_counts[indtag]=tags_counts[indtag]+1

REPLACE_BY_SPACE_RE = re.compile('[/(){}\[\]\|@,;]')
BAD_SYMBOLS_RE = re.compile('[^0-9a-z #+_]')
STOPWORDS = set(stopwords.words('english'))

def text_prepare(text):

    text =text.lower()
    text = re.sub(REPLACE_BY_SPACE_RE,' ',text)
    text = re.sub(BAD_SYMBOLS_RE,'',text)
    text = ' '.join(w for w in text.split() if w not in STOPWORDS)
    return text

# xtest_preocessing =[text_prepare(text) for text in ['Suzanne Bonamici supports a plan that will cut choice for Medicare Advantage seniors.']]

#tfidf_vectorizer = TfidfVectorizer(token_pattern='(\S+)', min_df=5, max_df=0.9, ngram_range=(1,2))

tfidf_vectorizer_model = pickle.load(open('vectorize.sav', 'rb'))

# xtest_preocessing = tfidf_vectorizer_model.transform(xtest_preocessing)
tfidf_vocab = tfidf_vectorizer_model.vocabulary_

mlb = MultiLabelBinarizer(classes=sorted(tags_counts.keys()))
ytrain = mlb.fit_transform(ytrain)


loaded_model = pickle.load(open('model.sav', 'rb'))


def get_subject(statement):
    xtest_preocessing =[text_prepare(text) for text in [statement]]
    xtest_preocessing = tfidf_vectorizer_model.transform(xtest_preocessing)
    ypred = loaded_model.predict(xtest_preocessing)

    ypred_inversed = mlb.inverse_transform(ypred)
    return ypred_inversed[0]

print(get_subject('USPS and Mail-In Ballots: States Warned It May Not Meet Deadlines'))
